#!/usr/bin/env ruby
# @Author: vargash1
# @Name:   Vargas, Hector
# @Email:  vargash1@wit.edu
# @Date:   2015-02-23 10:23:20
# @Last Modified by:   vargash1
# @Last Modified time: 2015-05-10 12:49:45
require 'colorize'
class BoolCalc
    def print_all_radix(num)
        puts "Decimal:\t\tHex:".yellow
        puts "\t#{num.to_s(10)}\t\t#{num.to_s(16)}"
        puts "Binary: ".yellow
        print_nice_binary(num)
    end
    def execute()
        puts "\t-----------------X---------------------".yellow
        print_all_radix(@x)
        if (@y != nil)
            puts "\t-----------------Y---------------------".yellow
            print_all_radix(@y)
        end
        puts "\t-----------------#{@operation}-------------------".yellow
        case 
        when (@operation == 'AND')
            final_result = @x & @y
        when (@operation == 'OR')
            final_result = @x | @y
        when (@operation == 'XOR')
            final_result = @x ^ @y 
        when (@operation == 'NOT')
            final_result = ~@x
        when (@operation == 'SHR')
            final_result = @x >> @y
        when (@operation == 'SHL')
            final_result = @x << @y
        when (@operation == 'ROL')
            int_to_binary_arr()
            rol()
            final_result = (@bit64_array_x.join).to_i(2)
        when(@operation == 'ROR')
            int_to_binary_arr()
            ror()
            final_result = (@bit64_array_x.join).to_i(2)
        when(@operation == 'RAD')
            return
        end
        puts "\n\t----------------Result-----------------".yellow
        print_all_radix(final_result)   
    end
    def check_for_errors()
        if (@operation == nil)
            abort ("ERROR, EXPECTED AN OPERATION".red)
        end
        #not and rad require just one number argument
        #if operation is not either and y is nil then we have a problem...
        operation_restriction = (@operation != "NOT" && @operation != "RAD")
        if ((operation_restriction && @y == nil) || (@x == nil))
            abort("ERROR, MISSING NUMBER(s)".red)
        end
    end   
    def parse_args()
        ops = ['NOT','SHR','SHL','AND','OR','XOR','RAD','ROL','ROR']
        if (ARGV.length == 0 || (ARGV[0].upcase) == "-H")
            print_help()
            exit
        end
        ARGV.each do |a|
            case 
            #if ARGV[a] is letters only,check if its a valid operation
            when (a == a[/[a-zA-Z]*/])
                ops.each do |ops_elem|
                    if (a.upcase == ops_elem)
                        @operation = ops_elem
                    end
                end
            #if ARGV[a] is a number, save it.
            #also keep track of how many numbers we have read
            when (is_number(a.to_i))
                if (@x == nil) ? @x = a.to_i: @y = a.to_i
                end
            end
        end
    end
    def is_number(num)
        is_num = ((num.to_f.to_s == num.to_s) || (num.to_i.to_s == num.to_s))
        return is_num
    end
    def print_help()
        puts """\tSimply run the Ruby Script with the any of the following as arguements.\n
        \tbitwiseCalc <num> <operation> <num>\n
        Results will be output in Hex, Binary, and Decimal
        \tHere are some examples
            1 AND 2
                Displays 1 & 2 
            1 OR 2
                Displays 1 | 2 
            NOT 1
                Displays ~1 
            1 XOR 2
                Displays 1 XOR 2
            1 SHR 2
                Displays 1 Shifted Right by 2
            1 SHL 2
                Displays 1 Shifted Left by  2
            1 ROR 2 
                Displays 1 Rotated Right 2 Times
            1 ROL 2
                Displays 1 Rotated Right 2 Times
            1 RAD
                Displays 1 in Hex, Binary(32 & 64 Bit Format), and as well as Decimal
        Please Note that the order in which you enter the arguments
        as well as case sensitivity DO NOT matter!
        """
        exit
    end
    #outputs num in binary form
    def print_nice_binary(num)
        puts "\t32 BIT FORMAT".yellow
        print "\t"
        31.downto(0) do |n| 
            print num[n]
            if (n%4 == 0); print " " end
        end
        puts "\n\t64 BIT FORMAT".yellow
        print "\t"
        63.downto(0) do |n|
            print num[n]
            if (n%4 == 0); print " " end
        end
        puts 
    end
    #converts an integer to a binary array
    def int_to_binary_arr()
        @bit64_array_x = []
        63.downto(0) do |n|
            @bit64_array_x << @x[n]
        end
    end
    def ror()
        for i in 1..@y
            #save least significant bit(end of array) 
            lsb = @bit64_array_x[-1]
            for j in 0..(@bit64_array_x.length-2)
                if j == 0
                    #save next elem(right shift)
                    #assign next element in the array to the current element
                    tmp1 = @bit64_array_x[j+1]
                    @bit64_array_x[j+1] = @bit64_array_x[j]
                end
                #save next element, make next element previously saved elem
                tmp2 = @bit64_array_x[j+1]
                @bit64_array_x[j+1] = tmp1
                tmp1 = tmp2  
            end
            #assign least significant bit(end of array) to head of array
            @bit64_array_x[0] = lsb
        end
    end
    def rol()
        for i in 1..@y
            #save most significant bit(beginning of array)
            msb = @bit64_array_x[0]
            for j in 0..(@bit64_array_x.length-2)
                #assign next element in array to current element in array
                @bit64_array_x[j] = @bit64_array_x[j+1]
            end
            #assign most significant bit to tail
            @bit64_array_x[-1] = msb
        end 
    end       
end
def main()
    runtime = BoolCalc.new()
    runtime.parse_args()
    runtime.check_for_errors()
    runtime.execute()
end
main()  
